{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterdMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAWeA,EARF,SAACC,GAAD,OACT,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,eAAeC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAC3B,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCHdC,EAAW,SAACR,GACtB,OACI,qBAAKC,UAAY,YAAjB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAECA,QAASA,GADJA,EAAQC,UCIdM,G,MAVG,SAACX,GAAD,OACd,8BACI,uBAAOC,UAAY,SACnBW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,mBCsCPC,E,kDAxCf,aAAe,IAAD,8BACZ,gBAeFD,aAAe,SAACE,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdpC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAUd,WAAoB,IAAD,OACjBI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,oBAO3C,WAAU,IAAD,EAEyBC,KAAKN,MAA9Bb,EAFA,EAEAA,SAAUU,EAFV,EAEUA,YACXU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAC/DC,SAASb,EAAYY,kBAEtB,OACE,sBAAK9B,UAAY,MAAjB,UACE,kDACF,cAAC,EAAD,CACAY,YAAY,kBACZE,aAAgBa,KAAKb,eAErB,cAAC,EAAD,CAAUN,SAAYoB,W,GAlCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d422d067.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nconst Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monsterImage\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h1>{props.monster.name}</h1>\r\n        <h3>{props.monster.email}</h3>\r\n    </div>\r\n)\r\n\r\nexport default Card;","import React from 'react';\r\nimport './card-list.style.css';\r\nimport Card from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n   return(\r\n       <div className = 'card-list'>\r\n           {props.monsters.map(monster => (\r\n               <Card\r\n                key={monster.id} \r\n                monster={monster}>    \r\n                </Card>\r\n           ))}\r\n       </div>\r\n   )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = (props) => (\r\n    <div>    \r\n        <input className = 'search'\r\n        type=\"search\" \r\n        placeholder={props.placeholder} \r\n        onChange={props.handleChange}\r\n        />\r\n    </div>\r\n)\r\n    \r\nexport default SearchBox;","import './App.css';\nimport React, { Component} from 'react'\nimport {CardList} from './components/card-list/card-list.components'\nimport SearchBox from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n\n  }\n\n  componentDidMount(){\n    fetch(\"http://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value})\n  }\n\n  render() {\n\n    const {monsters, searchField} = this.state;\n    const filterdMonsters = monsters.filter(monster => monster.name.toLowerCase()\n    .includes(searchField.toLowerCase()));\n    \n    return ( \n      <div className = \"App\">\n        <h1> Monsters Cards </h1>\n      <SearchBox \n      placeholder=\"Search Monsters\"\n      handleChange = {this.handleChange}\n      />\n      <CardList monsters = {filterdMonsters}>\n      </CardList>\n      </div>\n      )\n    }\n  }\n\n  export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}